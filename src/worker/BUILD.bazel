load("@aspect_rules_js//js:defs.bzl", "js_binary")
load("@aspect_rules_rollup//rollup:defs.bzl", "rollup")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("//src/private:symlink_package.bzl", "symlink_package")

package(default_visibility = ["//visibility:public"])

symlink_package(
    name = "node_modules/@angular/compiler-cli",
    src = "@rules_angular_configurable_deps//:angular_compiler_cli",
)

symlink_package(
    name = "node_modules/typescript",
    src = "@rules_angular_configurable_deps//:typescript",
)

copy_file(
    name = "copy_worker_js",
    src = "@aspect_rules_js//js/private/worker:worker.js",
    out = "worker_lib/protocol/worker.cjs",
)

copy_file(
    name = "copy_worker_js_ng",
    src = "@aspect_rules_js//js/private/worker:worker.js",
    out = "worker_lib_ng/protocol/worker.cjs",
)


ts_project(
    name = "worker_lib",
    out_dir = "worker_lib",
    srcs = glob([
        "**/*.mts",
        "**/*.cts",
    ]),
    data = [":copy_worker_js"],
    declaration = True,
    tsconfig = "tsconfig.json",
    deps = [
        "//:node_modules/@angular/compiler-cli",
        ":node_modules/typescript",
        "//:node_modules/@types/node",
        "//:node_modules/json-stable-stringify",
        "//:node_modules/lru-cache",
        "//:node_modules/memfs",
    ],
)


ts_project(
    name = "worker_lib_ng",
    out_dir = "worker_lib_ng",
    srcs = glob([
        "**/*.mts",
        "**/*.cts",
    ]),
    data = [":copy_worker_js_ng"],
    declaration = True,
    tsconfig = "tsconfig.json",
    deps = [
        ":node_modules/@angular/compiler-cli",
        ":node_modules/typescript",
        "//:node_modules/@types/node",
        "//:node_modules/json-stable-stringify",
        "//:node_modules/lru-cache",
        "//:node_modules/memfs",
    ],
)

js_binary(
    name = "worker_angular",
    data = [
        ":worker_lib_ng",
    ],
    entry_point = ":worker_lib_ng/index.mjs",
)

js_binary(
    name = "worker_vanilla_ts",
    data = [
        ":worker_lib",
    ],
    entry_point = ":worker_lib/index.mjs",
    fixed_args = ["--vanilla-ts"],
)

rollup(
    name = "bundle",
    srcs = [":copy_worker_js"],
    config_file = "rollup.config.mjs",
    entry_point = ":worker_lib/index.mjs",
    format = "esm",
    node_modules = "//:node_modules",
    deps = [
        ":worker_lib",
        "//:node_modules/@rollup/plugin-commonjs",
        "//:node_modules/@rollup/plugin-node-resolve",
        "//:node_modules/@rollup/plugin-terser",
    ],
)

rollup(
    name = "bundle_ng",
    srcs = [":copy_worker_js_ng"],
    config_file = "rollup.config.mjs",
    entry_point = ":worker_lib_ng/index.mjs",
    format = "esm",
    node_modules = "//:node_modules",
    deps = [
        ":worker_lib_ng",
        "//:node_modules/@rollup/plugin-commonjs",
        "//:node_modules/@rollup/plugin-node-resolve",
        "//:node_modules/@rollup/plugin-terser",
    ],
)
